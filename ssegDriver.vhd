--generated by V2 synthesiser
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity ssegDriver is port (
	clk : in std_logic;
	rst : in std_logic;
	cathode_p : out std_logic_vector(7 downto 0);
	digit1_p : in std_logic_vector(3 downto 0);
	anode_p : out std_logic_vector(3 downto 0);
	digit2_p : in std_logic_vector(3 downto 0);
	digit3_p : in std_logic_vector(3 downto 0);
	digit4_p : in std_logic_vector(3 downto 0)
); end ssegDriver;

------------------------------------------------

architecture behavioural of ssegDriver is

	type T_prc_0_sv is(prc_0_s1, prc_0_s2, prc_0_s8, prc_0_s15, prc_0_s22);
	signal prc_0_sv_curr : T_prc_0_sv;
	signal prc_0_sv_next : T_prc_0_sv;


	signal prc_0_ap_3 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_cnt : std_logic_vector(3 downto 0);
	signal prc_0_ap_3_it_0 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_1 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_2 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_3 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_4 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_5 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_6 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_7 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_8 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_9 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_10 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_11 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_12 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_13 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_14 : std_logic_vector(7 downto 0);
	signal prc_0_ap_3_it_15 : std_logic_vector(7 downto 0);

	signal cathode : std_logic_vector(7 downto 0);
	signal cathode_breg : std_logic_vector(7 downto 0);
	signal digit1 : std_logic_vector(3 downto 0);
	signal i0 : std_logic_vector(3 downto 0);
	signal i0_breg : std_logic_vector(3 downto 0);
	signal anode : std_logic_vector(3 downto 0);
	signal anode_breg : std_logic_vector(3 downto 0);
	signal digit2 : std_logic_vector(3 downto 0);
	signal digit3 : std_logic_vector(3 downto 0);
	signal digit4 : std_logic_vector(3 downto 0);
	signal prc_0_ap_bufZug_0 : std_logic_vector(7 downto 0);
	signal prc_0_ap_bufZug_1 : std_logic_vector(7 downto 0);
	signal prc_0_ap_bufZug_2 : std_logic_vector(7 downto 0);
	signal prc_0_ap_bufZug_3 : std_logic_vector(7 downto 0);
	signal prc_0_bufZegFeg_0 : std_logic_vector(3 downto 0);
	signal prc_0_bufZegFeg_1 : std_logic_vector(7 downto 0);
	signal prc_0_bufZegFeg_2 : std_logic_vector(3 downto 0);
	signal prc_0_bufZegFeg_3 : std_logic_vector(7 downto 0);
	signal prc_0_bufZegFeg_4 : std_logic_vector(3 downto 0);
	signal prc_0_bufZegFeg_5 : std_logic_vector(7 downto 0);
	signal prc_0_bufZegFeg_6 : std_logic_vector(3 downto 0);
	signal prc_0_bufZegFeg_7 : std_logic_vector(7 downto 0);

begin

	prc_0_sv_next <= 
		prc_0_s2 when prc_0_sv_curr = prc_0_s1 else
		prc_0_s8 when prc_0_sv_curr = prc_0_s2 else
		prc_0_s15 when prc_0_sv_curr = prc_0_s8 else
		prc_0_s22 when prc_0_sv_curr = prc_0_s15 else
		prc_0_s2 when prc_0_sv_curr = prc_0_s22 else
		prc_0_s1;

	process(clk, rst) begin
		if (rst = '1') then
			prc_0_sv_curr <= prc_0_s1;
		elsif (clk'event and clk = '1') then
			prc_0_sv_curr <= prc_0_sv_next;
		end if;
	end process;


	with prc_0_ap_3_cnt select prc_0_ap_3 <= 
		prc_0_ap_3_it_0 when "0000"&"",
		prc_0_ap_3_it_1 when "000"&"1",
		prc_0_ap_3_it_2 when "00"&"10",
		prc_0_ap_3_it_3 when "00"&"11",
		prc_0_ap_3_it_4 when "0"&"100",
		prc_0_ap_3_it_5 when "0"&"101",
		prc_0_ap_3_it_6 when "0"&"110",
		prc_0_ap_3_it_7 when "0"&"111",
		prc_0_ap_3_it_8 when "1000",
		prc_0_ap_3_it_9 when "1001",
		prc_0_ap_3_it_10 when "1010",
		prc_0_ap_3_it_11 when "1011",
		prc_0_ap_3_it_12 when "1100",
		prc_0_ap_3_it_13 when "1101",
		prc_0_ap_3_it_14 when "1110",
		prc_0_ap_3_it_15 when "1111",
		"XXXXXXXX" when others;
	prc_0_ap_3_cnt <= 
		prc_0_bufZegFeg_0 when prc_0_sv_curr = prc_0_s2 else
		prc_0_bufZegFeg_2 when prc_0_sv_curr = prc_0_s8 else
		prc_0_bufZegFeg_4 when prc_0_sv_curr = prc_0_s15 else
		prc_0_bufZegFeg_6 when prc_0_sv_curr = prc_0_s22 else
		i0;
	prc_0_ap_3_it_0 <= 
		"11000000";

	prc_0_ap_3_it_1 <= 
		"11111001";

	prc_0_ap_3_it_2 <= 
		"10100100";

	prc_0_ap_3_it_3 <= 
		"10110000";

	prc_0_ap_3_it_4 <= 
		"10011001";

	prc_0_ap_3_it_5 <= 
		"10010010";

	prc_0_ap_3_it_6 <= 
		"10000010";

	prc_0_ap_3_it_7 <= 
		"11111000";

	prc_0_ap_3_it_8 <= 
		"10000000";

	prc_0_ap_3_it_9 <= 
		"10011000";

	prc_0_ap_3_it_10 <= 
		"10001000";

	prc_0_ap_3_it_11 <= 
		"10000011";

	prc_0_ap_3_it_12 <= 
		"11000110";

	prc_0_ap_3_it_13 <= 
		"10100001";

	prc_0_ap_3_it_14 <= 
		"10000110";

	prc_0_ap_3_it_15 <= 
		"10001110";

	cathode_breg <= 
		prc_0_bufZegFeg_1 when prc_0_sv_curr = prc_0_s2 else
		prc_0_bufZegFeg_3 when prc_0_sv_curr = prc_0_s8 else
		prc_0_bufZegFeg_5 when prc_0_sv_curr = prc_0_s15 else
		prc_0_bufZegFeg_7 when prc_0_sv_curr = prc_0_s22 else
		cathode;

	process (clk, rst) begin
		if (rst = '1') then
			cathode <= "00000000";
		elsif (clk'event and clk = '1') then
			cathode <= cathode_breg;
		end if;
	end process;

	i0_breg <= 
		digit1 when prc_0_sv_curr = prc_0_s2 else
		digit2 when prc_0_sv_curr = prc_0_s8 else
		digit3 when prc_0_sv_curr = prc_0_s15 else
		digit4 when prc_0_sv_curr = prc_0_s22 else
		i0;

	process (clk, rst) begin
		if (rst = '1') then
			i0 <= "0000";
		elsif (clk'event and clk = '1') then
			i0 <= i0_breg;
		end if;
	end process;

	anode_breg <= 
		"1110" when prc_0_sv_curr = prc_0_s2 else
		"1101" when prc_0_sv_curr = prc_0_s8 else
		"1011" when prc_0_sv_curr = prc_0_s15 else
		"0"&"111" when prc_0_sv_curr = prc_0_s22 else
		anode;

	process (clk, rst) begin
		if (rst = '1') then
			anode <= "0000";
		elsif (clk'event and clk = '1') then
			anode <= anode_breg;
		end if;
	end process;

	prc_0_ap_bufZug_0 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s2 else
		"XXXXXXXX";

	prc_0_ap_bufZug_1 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s8 else
		"XXXXXXXX";

	prc_0_ap_bufZug_2 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s15 else
		"XXXXXXXX";

	prc_0_ap_bufZug_3 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s22 else
		"XXXXXXXX";

	prc_0_bufZegFeg_0 <= 
		digit1 when prc_0_sv_curr = prc_0_s2 else
		i0;

	prc_0_bufZegFeg_1 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s2 else
		prc_0_ap_bufZug_0;

	prc_0_bufZegFeg_2 <= 
		digit2 when prc_0_sv_curr = prc_0_s8 else
		i0;

	prc_0_bufZegFeg_3 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s8 else
		prc_0_ap_bufZug_1;

	prc_0_bufZegFeg_4 <= 
		digit3 when prc_0_sv_curr = prc_0_s15 else
		i0;

	prc_0_bufZegFeg_5 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s15 else
		prc_0_ap_bufZug_2;

	prc_0_bufZegFeg_6 <= 
		digit4 when prc_0_sv_curr = prc_0_s22 else
		i0;

	prc_0_bufZegFeg_7 <= 
		prc_0_ap_3 when prc_0_sv_curr = prc_0_s22 else
		prc_0_ap_bufZug_3;

	cathode_p <= cathode;
	digit1 <= digit1_p;
	anode_p <= anode;
	digit2 <= digit2_p;
	digit3 <= digit3_p;
	digit4 <= digit4_p;

end behavioural;